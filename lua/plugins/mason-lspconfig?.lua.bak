-- lua/plugins/lsp.lua (separate config file)
return {
  -- LSP Configuration
  {
    "neovim/nvim-lspconfig",
    event = "BufReadPre",
    dependencies = {
      {
        "williamboman/mason-lspconfig.nvim",
        dependencies = {
          "williamboman/mason.nvim",
        },
        config = function()
          -- Setup mason first
          require("mason").setup()
          
          -- Auto-install these LSP servers (edit list as needed)
          require("mason-lspconfig").setup({
            ensure_installed = {
              "lua_ls",       -- Lua
              "pyright",      -- Python
              "tsserver",     -- TypeScript/JavaScript
              "rust_analyzer" -- Rust
            },
            automatic_installation = true,
          })
          
          -- Auto-setup LSP servers when they're installed
          require("mason-lspconfig").setup_handlers({
            function(server_name)
              require("lspconfig")[server_name].setup({
                capabilities = require("cmp_nvim_lsp").default_capabilities()
              })
            end,
            ["lua_ls"] = function()
              require("lspconfig").lua_ls.setup({
                settings = {
                  Lua = {
                    diagnostics = { globals = { "vim" } },
                    workspace = { checkThirdParty = false }
                  }
                }
              })
            end
          })
        end
      }
    },
    config = function()
      -- Common LSP keymaps
      vim.api.nvim_create_autocmd("LspAttach", {
        callback = function(args)
          local client = vim.lsp.get_client_by_id(args.data.client_id)
          local buf = args.buf
          
          -- Enable formatting
          if client.supports_method("textDocument/formatting") then
            vim.keymap.set("n", "<leader>f", function()
              vim.lsp.buf.format({ async = true })
            end, { buffer = buf })
          end

          -- Hover documentation
          vim.keymap.set("n", "K", vim.lsp.buf.hover, { buffer = buf })
        end
      })
    end
  }
}
